1. Dada uma variável `a` do tipo `char` (um byte), escreva os trechos de código em C para:
	(a) Somente setar o bit menos significativo de `a`.
		a |= BIT0;

	(b) Somente setar dois bits de `a`: o menos significativo e o segundo menos significativo.
		a |= BIT1 + BIT0;
		
	(c) Somente zerar o terceiro bit menos significativo de `a`.
		a &= ~BIT2;
	
	(d) Somente zerar o terceiro e o quarto bits menos significativo de `a`.
		a &= ~BIT2 + ~BIT3;
	
	(e) Somente inverter o bit mais significativo de `a`.
		a ^= BIT0;

	(f) Inverter o nibble mais significativo de `a`, e setar o nibble menos significativo de `a`. 
		a ^= BIT3;
		a |= BIT0;		


2. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar os dois LEDs ininterruptamente.

	#include <msp430g2553.h>
	#define LED1 BIT0
	#define LED2 BIT6

	void main (void)
	{
	 int c;
	 WDTCTL = WDTPW | WDTHOLD;
	 P1DIR = LED1 + LED2; 
	 P1OUT = LED1 + LED2; 
	for(;;){
		P1OUT ^= (LED1 + LED2);
		for(c=0; c<100000; c++){
	 };
	     }; 
		 
	};	


3. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar duas vezes os dois LEDs sempre que o usuário pressionar o botão.
	

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT6
#define BTN BIT3

void main (void){
	int i;
	WDTCL = WDTPW | WDTHOLD;
	P1DIR = LED1 + LED2;
	P1OUT = 0;
	
	for(;;){
		if (P1OUT & BTN == 0){
			
			P1OUT |= LED1 + LED2;			//Liga
			
			for(i = 0; i <10000; i++){
			};
			
			P1OUT = 0;						//Desliga
			
			for(i = 0; i <10000; i++){
			};
			
			P1OUT = LED1 + LED2;			//Liga			
			
			for(i = 0; i <10000; i++){
			};
			
			P1OUT = 0;						//Desliga
		};
	};
};

4. Considerando a placa Launchpad do MSP430, faça uma função em C que pisca os dois LEDs uma vez.

void pisca (){
	unsigned volatile int i;
	P1OUT ^= LEDS;
	P2OUT ^= BTN;
	
	for(i = 0; i<10000; i++){}
	
	P1OUT ^= LEDS;
	P2OUT ^= BTN;
	
	for(i = 0; i<10000; i++){}
	}


5. Reescreva o código da questão 2 usando a função da questão 4.

#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)
#define BTN BIT3

void pisca();

void main (void){
	WDTCL = WDTPW | WDTHOLD;
	P1OUT |= LEDS;
	P1DIR |= LEDS;
	P2DIR &= ~BTN;
	P2REN |= BTN;
	P2OUT |= BTN;
	
	while (1){
		pisca();
	}
}	

void pisca (){
	unsigned volatile int i;
	P1OUT ^= LEDS;
	P2OUT ^= BTN;
	
	for(i = 0; i<10000; i++){}
	
	P1OUT ^= LEDS;
	P2OUT ^= BTN;
	
	for(i = 0; i<10000; i++){}
	}

6. Reescreva o código da questão 3 usando a função da questão 4.

#include <msp430.h>
#define LED1 BIT0
#define LED2 BIT1
#define LEDS (LED1|LED2)
#define BTN  BIT3

void pisca();

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;
    PM5CTL0 &= ~LOCKLPM5;
    P1OUT |= LEDS;
    P1DIR |= LEDS;
    P2DIR &= ~BTN;
    P2REN |= BTN;
    P2OUT |= BTN;

    while(1)
    {
        if((P2IN & BTN)==0){
         pisca();
         pisca();
        }else
            P1OUT &= ~LEDS;
    }

}

void pisca(){
    unsigned volatile int counter;
    P1OUT ^= LEDS;
    P2OUT ^= BTN;

	for(counter = 0; counter < 30000; counter++){}

	P1OUT ^= LEDS;
    P2OUT ^= BTN;

	for(counter = 0; counter < 30000; counter++){}
}

