1. Dada uma variável `a` do tipo `char` (um byte), escreva os trechos de código em C para:
	(a) Somente setar o bit menos significativo de `a`.
		a |= BIT0;

	(b) Somente setar dois bits de `a`: o menos significativo e o segundo menos significativo.
		a |= BIT1 + BIT0;
		
	(c) Somente zerar o terceiro bit menos significativo de `a`.
		a &= ~BIT2;
	
	(d) Somente zerar o terceiro e o quarto bits menos significativo de `a`.
		a &= ~BIT2 + ~BIT3;
	
	(e) Somente inverter o bit mais significativo de `a`.
		a ^= BIT0;

	(f) Inverter o nibble mais significativo de `a`, e setar o nibble menos significativo de `a`. 
		a ^= BIT3;
		a |= BIT0;		


2. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar os dois LEDs ininterruptamente.

	#include <msp430g2553.h>
	#define LED1 BIT0
	#define LED2 BIT6

	void main (void)
	{
	 int c;
	 WDTCTL = WDTPW | WDTHOLD;
	 P1DIR = LED1 + LED2; 
	 P1OUT = LED1 + LED2; 
	for(;;){
		P1OUT ^= (LED1 + LED2);
		for(c=0; c<100000; c++){
	 };
	     }; 
		 
	};	


3. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar duas vezes os dois LEDs sempre que o usuário pressionar o botão.
	
	#include <msp430g2553.h>
	#define LED1 BIT0
	#define LED2 BIT6
	#define BTN BIT3

	void main (void)
	{
	 int i;
	 WDTCTL = WDTPW | WDTHOLD;
	 P1OUT = 0;
	 P1DIR = LED1 + LED2; 
	 
	 for(;;){
	 	if (PIOUT & BTN ==0)
			PIOUT |= LED1 + LED2;
			for(i=0;i<10000;i++){
			PIOUT |=LED1 + LED2;
					    };
			PIOUT = 0;
			for(i=0;i<10000;i++){
			PIOUT |=LED1 + LED2;
		else 
	  		PIOUT &= ~(LED1 + LED2)
	 }	
};
	  
	}	

4. Considerando a placa Launchpad do MSP430, faça uma função em C que pisca os dois LEDs uma vez.


5. Reescreva o código da questão 2 usando a função da questão 4.


6. Reescreva o código da questão 3 usando a função da questão 4.
