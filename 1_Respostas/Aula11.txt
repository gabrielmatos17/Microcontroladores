1. Defina a função `void Atraso(volatile unsigned int x);` que fornece um atraso de `x` milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.

	#include <msp430.h> 

	void Atraso(volatile unsigned int x)
	{
			  TA0CCR0=x*(10^3)-1;
			  TA0CTL=TASSEL2 + ID_0+ MC_1; // sub_master_clock - dividir por 1 - contador up
			  while((TA0CTL&TAIFG)==0);    // Fica preso aqui até TAIFG ser setada
			  TA0CTL &=~TAIFG;             // Zera a flag de interrupção

	}

	int main(void)
	{
		WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
		return 0;
	}


2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.

	#include <msp430.h> 
	#define LED1 BIT0

	void Atraso(volatile unsigned int x)
	{
			  TA0CCR0=1000-1;
			  TA0CTL=TASSEL_2 + ID_0 + MC_1;   // sub_master_clock - dividir por 1 - contador up

			  while(x>0)
			  {
				  x--;
				  while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a TAIFG ser setada
				  TA0CTL &=~TAIFG;             // Zera a flag de interrupção
			  }
			  TACTL= MC_0;               	   //modo stop do timerA
	}

	int main(void)
	{
		WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

		BCSCTL1= CALBC1_1MHZ;
		DCOCTL=  CALDCO_1MHZ;
		P1OUT &=~LED1;
		P1DIR |=LED1;

		while(1)
		{
			Atraso(10);
			P1OUT ^=LED1;

		}
	}


3. Pisque os LEDs da Launchpad numa frequência de 20 Hz.


	#include <msp430.h> 
	#define LED1 BIT0

	void Atraso(volatile unsigned int x)
	{
			  TA0CCR0=1000-1;
			  TA0CTL=TASSEL_2 + ID_0 + MC_1; 	// sub_master_clock - dividir por 1 - contador up

			  while(x>0)
			  {
				  x--;
				  while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a TAIFG ser setada
				  TA0CTL &=~TAIFG;             // Zera a flag de interrupção
			  }
			  TACTL= MC_0;                	   //modo stop do timerA
	}

	int main(void)
	{
		WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

		BCSCTL1= CALBC1_1MHZ;
		DCOCTL=  CALDCO_1MHZ;
		P1OUT &=~LED1;
		P1DIR |=LED1;

		while(1)
		{
			Atraso(50);
			P1OUT ^=LED1;

		}
	}


4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.

	#include <msp430.h> 
	#define LED1 BIT0

	void Atraso(volatile unsigned int x)
	{
			  TA0CCR0=1000-1;
			  TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

			  while(x>0)
			  {
				  x--;
				  while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a TAIFG ser setada
				  TA0CTL &=~TAIFG;             // Zera a flag de interrupção
			  }
			  TACTL= MC_0;                	   //modo stop do timerA
	}

	int main(void)
	{
		WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

		BCSCTL1= CALBC1_1MHZ;
		DCOCTL=  CALDCO_1MHZ;
		P1OUT &=~LED1;
		P1DIR |=LED1;



		while(1)
		{
			Atraso(1000);
			P1OUT ^=LED1;

		}
	}


5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

	#include <msp430.h> 
	#define LED1 BIT0

	void Atraso(volatile unsigned int x)
	{
			  TA0CCR0=1000-1;
			  TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

			  while(x>0)
			  {
				  x--;
				  while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a TAIFG ser setada
				  TA0CTL &=~TAIFG;             // Zera a flag de interrupção
			  }
			  TACTL= MC_0;                     //modo stop do timerA
	}

	int main(void)
	{
		WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

		BCSCTL1= CALBC1_1MHZ;
		DCOCTL=  CALDCO_1MHZ;
		P1OUT &=~LED1;
		P1DIR |=LED1;



		while(1)
		{
			Atraso(2000);
			P1OUT ^=LED1;

		}
	}

	
6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

	#include <msp430g2553.h>
	#include <legacymsp430.h>

	#define LED1 BIT0

	int main(void)
	{
		WDTCTL = WDTPW | WDTHOLD;

		BCSCTL1 = CALBC1_1MHZ;
		DCOCTL = CALDCO_1MHZ;
		P1OUT &=~LED1;
		P1DIR |=LED1;
		TA0CCR0=62500-1;
		TA0CTL= TASSEL_2 + ID_3 + MC_1+TAIE;      //master_clock - div/8 - contador up - ativa a interrupçao

		_BIS_SR(LPM0_bits +GIE);                  //modo baixo consumo 0, desligando o master_clock e deixando ativo o sub_master_clk
		return 0;
	}

	interrupt(TIMER0_A1_VECTOR) TA0_ISR(void)     //rotina de interrupção
	{
		P1OUT ^= LED1;                            //inverte o led a cada nova chamada da interupção, ou seja quando a flag TAIFG é setada
		TA0CTL &= ~TAIFG;                         //zerando a flag TAIFG no TAC0CTL
	}


7. Defina a função `void paralelo_para_serial(void);` que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.

8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

9. Defina a função `void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho);` para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.
